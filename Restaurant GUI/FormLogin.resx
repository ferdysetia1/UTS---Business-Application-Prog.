<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="label3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>